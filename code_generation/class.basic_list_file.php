<?php

error_reporting(E_ALL);

/**
 * untitledModel - class.basic_list_file.php
 *
 * $Id$
 *
 * This file is part of untitledModel.
 *
 * Automatically generated on 01.08.2014, 23:34:49 with ArgoUML PHP module 
 * (last revised $Date: 2010-01-12 20:14:42 +0100 (Tue, 12 Jan 2010) $)
 *
 * @author firstname and lastname of author, <author@example.org>
 */

if (0 > version_compare(PHP_VERSION, '5')) {
    die('This file was generated for PHP 5');
}

/**
 * include code_generation
 *
 * @author firstname and lastname of author, <author@example.org>
 */
require_once('class.code_generation.php');

/* user defined includes */
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000ABA-includes begin
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000ABA-includes end

/* user defined constants */
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000ABA-constants begin
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000ABA-constants end

/**
 * Short description of class basic_list_file
 *
 * @access public
 * @author firstname and lastname of author, <author@example.org>
 */
class basic_list_file
    extends code_generation
{
    // --- ASSOCIATIONS ---


    // --- ATTRIBUTES ---

    // --- OPERATIONS ---
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function open_write_basic_file()
    {
     $file = "../generated/class.generated_" . $this->class_name . "_list.php";
     $this->write_handle = fopen($file, 'w') or die("can't open file");
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function close_write_basic_file()
    {
     fclose($this->write_handle);
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_basic_header()
    {
     fwrite($this->write_handle, "<?php" . "\n" . "\n");
     fwrite($this->write_handle, "/**" . "\n" );
     fwrite($this->write_handle, " *" . 
     " This php file is automatically generated by Skolenet" . "\n" );
     fwrite($this->write_handle, " * Model - Class: " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, " */" . "\n" . "\n" );
     fwrite($this->write_handle, 
     "if (0 > version_compare(PHP_VERSION, '5'))" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, 
     "{ die('This file was generated for PHP 5'); }" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, 
     "require_once('class.basic_list.php');" . "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "class generated_" . 
     $this->class_name . "_list" . "\n" );
     fwrite($this->write_handle, "     extends basic_list" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "{" );
     fwrite($this->write_handle, "\n" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_footer()
    {
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "} /* end of class " . 
     $this->class_name . " */" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "?>" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_list_load()
    {
     $prepare_list = "";
     $parameter_database_list = "";
     $parameter_object_list = "";
     
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, 
     "     * This is the list_load function of the class " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, 
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function list_load( " .
     "$" . "where_statement )" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     
     $count = $this->command_attribute_list->get_item_count();
     for( $n=0; $n < ($count-1); $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     $prepare_list .= "      " . $item->get_attribute() . "," . "\n";
     }
     $item = $this->command_attribute_list->get_item( $count-1 );
     $prepare_list .= "      " . $item->get_attribute() . "\n";
     
     fwrite($this->write_handle, "      $" ."prepare_statement = " . "\n" );
     fwrite($this->write_handle, "      \"SELECT" . "\n" );
     fwrite($this->write_handle, $prepare_list );
     fwrite($this->write_handle, "      FROM ". 
     $this->class_name . " " . "\"" . " ." . "\n" );
     fwrite($this->write_handle, "      $" ."where_statement;" . "\n" );
     fwrite($this->write_handle, "      return " . 
     "$" . "this->basic_load(" . " $" . "prepare_statement );" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }


    public function write_basic_load()
    {
     $prepare_list = "";
     $parameter_database_list = "";
     $parameter_object_list = "";

     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This is the basic_load function of the class " .
     $this->class_name . "\n" );
     fwrite($this->write_handle,
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function basic_load( " .
     "$" . "prepare_statement )" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle,
     "      if( defined('__GEN_ROOT__') == FALSE )" . "\n" ); 
     fwrite($this->write_handle, 
     "      { define('__GEN_ROOT__', dirname(dirname(__FILE__))); }" . "\n" );
     fwrite($this->write_handle,
     "      require_once(__GEN_ROOT__.'/class." .
     $this->class_name . ".php');" . "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle,
     "      require \"data_connect.php\";" . "\n"  );
     fwrite($this->write_handle, "\n" );
     
     fwrite($this->write_handle, "      $" . "object_number = 0;" . "\n" );
     fwrite($this->write_handle, "      $" . "max_row = ". 
     "$" . "this->get_row_per_page();" . "\n" );
     fwrite($this->write_handle, "      $" . "page = ". 
     "$" . "this->get_page();" . "\n" );
     fwrite($this->write_handle, "      $" . "start_row = ". 
     "$" . "page" . "*" . "$" . "max_row;" . "\n" );

     $count = $this->command_attribute_list->get_item_count();
     for( $n=0; $n < ($count-1); $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     $parameter_database_list .=
     "      $" . $item->get_attribute() . "," . "\n";
     $parameter_object_list .=
     "      $" . "new_object->set_" . $item->get_attribute() .
     "( $" . $item->get_attribute() . " );" . "\n";
     }
     
     $item = $this->command_attribute_list->get_item( $count-1 );
     $parameter_database_list .=
     "      $" . $item->get_attribute() . "\n";
     $parameter_object_list .=
     "      $" . "new_object->set_" . $item->get_attribute() .
     "( $" . $item->get_attribute() . " );" . "\n";
     fwrite($this->write_handle,
     "      if( " . "$" . "this->stmt = $" . "mysqli->prepare(" . 
     " $" . "prepare_statement ))" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . "this->set_binding();" . "\n" );          
     fwrite($this->write_handle, "      $" . "this->stmt->execute();" . "\n" );
     fwrite($this->write_handle, "      $" . "this->stmt->bind_result" . "\n" );
     fwrite($this->write_handle, "      (" . "\n" );
     fwrite($this->write_handle, $parameter_database_list );
     fwrite($this->write_handle, "      );" . "\n" );

     fwrite($this->write_handle, "      $" . "this->stmt->store_result();" . "\n" );
     fwrite($this->write_handle, "      $" . "this->stmt->data_seek( ".
     "(int)( " . "$" . "start_row ) );" . "\n" );
     fwrite($this->write_handle, "      while( " . "$" . "this->" .
     "stmt->fetch()  " . "\n" );
     fwrite($this->write_handle, "      AND ( " . "$" . 
     "object_number < " . "$" . "max_row ) )" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . "new_object = ");
     fwrite($this->write_handle, "new " . $this->class_name . "();" . "\n" );
     fwrite($this->write_handle, $parameter_object_list );
     fwrite($this->write_handle, "      $" .
     "this->add_item( " . "$" . "new_object" . " );" . "\n" );
     fwrite($this->write_handle, "      $" . "object_number++;" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "this->stmt->close();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "mysqli->close();" . "\n" );
     fwrite($this->write_handle, "      return " .
     "$" . "object_number;" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }
    
    public function write_basic_count()
    {
     $prepare_list = "";
     $parameter_database_list = "";
     $parameter_object_list = "";

     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This is the basic_count function of the class " .
     $this->class_name . "\n" );
     fwrite($this->write_handle,
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function basic_count( " .
     "$" . "prepare_statement )" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle,
     "      require \"data_connect.php\";" . "\n"  );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "      $" . "object_number = 0;" . "\n" );
     fwrite($this->write_handle,
     "      if( " . "$" . "this->stmt = $" . "mysqli->prepare(" .
     " $" . "prepare_statement ))" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . "this->set_binding();" . "\n" );
     fwrite($this->write_handle, "      $" . "this->stmt->execute();" . "\n" );
     fwrite($this->write_handle, "      $" . "this->stmt->store_result();" . "\n" );
     fwrite($this->write_handle, "      $" . "object_number = " . "$" . 
     "this->stmt->num_rows;" . "\n" );
     fwrite($this->write_handle, "      $" . "this->stmt->close();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "mysqli->close();" . "\n" );
     fwrite($this->write_handle, "      return " .
     "$" . "object_number;" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }


    public function write_attribue()
    {
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This attribute hold the handle to the Mysqli statement " .
     $this->class_name . "\n" );
     fwrite($this->write_handle,
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     * @access protected" . "\n" );
     fwrite($this->write_handle, "     * @var Integer" . "\n" );     
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    protected " . "$" . "stmt = null;" . "\n" );
     fwrite($this->write_handle, "    " . "\n" );
    }
        /**
     * Short description of attribute filename
     *
     * @access public
     * @var String
     */
    public function write_get_prepare_list()
    {
     $prepare_list = "";

     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This is the prepare_list function of the class " .
     $this->class_name . "\n" );
     fwrite($this->write_handle,
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function get_prepare_list()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );

     $count = $this->command_attribute_list->get_item_count();
     for( $n=0; $n < ($count-1); $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     $prepare_list .= "      " . $this->class_name . 
     "." . $item->get_attribute() . "," . "\n";
     }
     $item = $this->command_attribute_list->get_item( $count-1 );
     $prepare_list .= "      " . $this->class_name .
     "." . $item->get_attribute();

     fwrite($this->write_handle, "      return " . "\n" );
     fwrite($this->write_handle, "      " . "\"" . "\n" );
     fwrite($this->write_handle, $prepare_list . "\n" );     
     fwrite($this->write_handle, "      " . "\";" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }
    
    
    public function write_set_binding()
    {
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This is the set_binding function of the class " .
     $this->class_name . "\n" );
     fwrite($this->write_handle,
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function set_binding()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, "      " . ";" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }

    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function generate_basic_list_file()
    {
     $this->open_read_file();
     $this->read_file();
     $this->close_read_file();
     $this->generate();
     $this->open_write_basic_file();
     $this->write_basic_header();
     $this->write_attribue();
     $this->write_list_load();
     $this->write_basic_count();     
     $this->write_basic_load();  
     $this->write_get_prepare_list();
     $this->write_set_binding();   
     $this->write_footer();
     $this->close_write_basic_file();
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function open_write_file()
    {
     $success = TRUE;
     $file = "../" . "class." . $this->class_name . "_list.php";

     if( file_exists ( $file ) )
     { $success = FALSE; }
     else
     { $this->write_handle = fopen($file, 'w') or die("can't open file"); }
     return $success;
    }
    
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
     
    public function write_header()
    {
     fwrite($this->write_handle, "<?php" . "\n" . "\n");
     fwrite($this->write_handle, "/**" . "\n" );
     fwrite($this->write_handle, " *" .
     " This php file is automatically generated by Skolenet" . "\n" );
     fwrite($this->write_handle, " * Model - Class: " .
     $this->class_name . "\n" );
     fwrite($this->write_handle, " */" . "\n" . "\n" );
     fwrite($this->write_handle,
     "if (0 > version_compare(PHP_VERSION, '5'))" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle,
     "{ die('This file was generated for PHP 5'); }" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle,
     "require_once('generated/class.generated_" . 
     $this->class_name . "_list.php');" . "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "class " .
     $this->class_name . "_list" . "\n" );
     fwrite($this->write_handle, "     extends generated_" . 
     $this->class_name ."_list" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "{" );
     fwrite($this->write_handle, "\n" );
    }
    
    public function write_load()
    {
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This is the load function of the class " .
     $this->class_name . "\n" );
     fwrite($this->write_handle,
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function load()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, "      ". "$" ."where_statement = " . "\n" );
     fwrite($this->write_handle, "//      WHERE XXX=?;" . "\n" );
     fwrite($this->write_handle, "      \"\";" . "\n" );

     fwrite($this->write_handle, "      return " .
     "$" . "this->list_load( " . "$" . "where_statement );" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }

 
    public function close_write_file()
    {
     fclose($this->write_handle);
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function generate_list_file()
    {
     if ($this->open_write_file())
     {
     $this->write_header();
     $this->write_load();
     $this->write_footer();
     $this->close_write_file();
     }
    }
}?>