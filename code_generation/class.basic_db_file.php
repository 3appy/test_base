<?php

error_reporting(E_ALL);

/**
 * untitledModel - class.basic_db_file.php
 *
 * $Id$
 *
 * This file is part of untitledModel.
 *
 * Automatically generated on 01.08.2014, 23:34:37 with ArgoUML PHP module 
 * (last revised $Date: 2010-01-12 20:14:42 +0100 (Tue, 12 Jan 2010) $)
 *
 * @author firstname and lastname of author, <author@example.org>
 */

if (0 > version_compare(PHP_VERSION, '5')) {
    die('This file was generated for PHP 5');
}

/**
 * include code_generation
 *
 * @author firstname and lastname of author, <author@example.org>
 */
require_once('class.code_generation.php');

/* user defined includes */
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000AB8-includes begin
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000AB8-includes end

/* user defined constants */
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000AB8-constants begin
// section 127-0-0-1--34f46263:14788e344ea:-8000:0000000000000AB8-constants end

/**
 * Short description of class basic_db_file
 *
 * @access public
 * @author firstname and lastname of author, <author@example.org>
 */
class basic_db_file
    extends code_generation
{
    // --- ASSOCIATIONS ---


    // --- ATTRIBUTES ---

    // --- OPERATIONS ---
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function open_write_basic_file()
    {
     $file = "../generated/class.generated_" . $this->class_name . ".php";
     $this->write_handle = fopen($file, 'w') or die("can't open file");
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_basic_header()
    {
     fwrite($this->write_handle, "<?php" . "\n" . "\n");
     fwrite($this->write_handle, "/**" . "\n" );
     fwrite($this->write_handle, " *" . 
     " This php file is automatically generated by Skolenet" . "\n" );
     fwrite($this->write_handle, " * Model - Class: " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, " */" . "\n" . "\n" );
     fwrite($this->write_handle, 
     "if (0 > version_compare(PHP_VERSION, '5'))" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, 
     "{ die('This file was generated for PHP 5'); }" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, 
     "require_once('class." . $this->extends . ".php');" . "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "class generated_" . $this->class_name . "\n" );
     fwrite($this->write_handle, "     extends " . $this->extends );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "{" );
     fwrite($this->write_handle, "\n" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_attributes()
    {
     $count = $this->command_attribute_list->get_item_count();
     fwrite($this->write_handle, "    // --- ATTRIBUTES ---" . "\n" );
     
     for( $n=0; $n < $count; $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, $item->get_command() );
     fwrite($this->write_handle, $item->get_attribute_line() );
     }
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_functions()
    {
     $count = $this->command_attribute_list->get_item_count();
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "     // --- OPERATIONS ---" . "\n" );
     
     for( $n=0; $n < $count; $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, $item->get_command() );
     fwrite($this->write_handle, "    public function set_" . 
     $item->get_attribute() . "($" . $item->get_attribute() . ")" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, "      $" . "this" . "->" .
     $item->get_attribute() . " = $" . $item->get_attribute() . ";" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, $item->get_command() );
     fwrite($this->write_handle, "    public function get_" . 
     $item->get_attribute() . "()" . "\n"  );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, "      return " . "$" . "this" . "->" . 
     $item->get_attribute() . ";" . "\n"  );
     fwrite($this->write_handle, "    }" . "\n" );
     }
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_footer()
    {
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "} /* end of class " . 
     $this->class_name . " */" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "?>" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function close_write_basic_file()
    {
     fclose($this->write_handle);
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_insert()
    {
     $parameter_object_list = "";
     $prepare_list = "";
     $value_list = "";
     $parameter_type_list = "";
     $parameter_database_list = "";
     
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle,
     "     * This is the insert function of the class " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function insert()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, 
     "      require \"data_connect.php\";" . "\n"  );
     fwrite($this->write_handle, "      $" . "insert_id = 0;" . "\n"  );
     
     $count = $this->command_attribute_list->get_item_count();
     for( $n=0; $n < ($count-1); $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     if( $item->get_attribute_type_long() != "time_stamp" )
     {
     $parameter_object_list .= "      $" . $item->get_attribute() .
     " = $" . "this->get_". $item->get_attribute() . "();" . "\n";
     $prepare_list .= "      " . $item->get_attribute() . "," . "\n";
     $value_list .= "?,";
     $parameter_type_list .= $item->get_attribute_type();
     $parameter_database_list .= 
     "      $" . $item->get_attribute() . "," . "\n";
     }
     }
     $item = $this->command_attribute_list->get_item( $count-1 );
     if( $item->get_attribute_type_long() != "time_stamp" )
     {
     $parameter_object_list .= "      $" . $item->get_attribute() .
     " = $" . "this->get_". $item->get_attribute() . "();" . "\n";
     $prepare_list .= "      " . $item->get_attribute() . "\n";
     $value_list .= "?";
     $parameter_type_list .= $item->get_attribute_type();
     $parameter_database_list .= 
     "      $" . $item->get_attribute() . "\n";
     }
     
     fwrite($this->write_handle, $parameter_object_list );
     
     fwrite($this->write_handle, 
     "      if( $" . "stmt = $" . "mysqli->prepare(" . "\n" );
     fwrite($this->write_handle, 
     "      \"INSERT INTO " . $this->class_name . "\n" );
     fwrite($this->write_handle, "      (" . "\n" );
     fwrite($this->write_handle, $prepare_list );
     fwrite($this->write_handle, "      )" . "\n" );
     fwrite($this->write_handle, 
     "      VALUES (" . $value_list . ")\"))" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->bind_param" . "\n" );
     fwrite($this->write_handle, "      (" . "\n" );
     fwrite($this->write_handle, 
     "      \"" . $parameter_type_list . "\"," . "\n" );
     fwrite($this->write_handle, $parameter_database_list );
     fwrite($this->write_handle, "      );" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->execute();" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->close();" . "\n" );
     fwrite($this->write_handle, "      $" . "insert_id = " . 
     "$" . "mysqli->insert_id;" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      else" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->insert_error();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "mysqli->close();" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->serialize();" . "\n" );
     fwrite($this->write_handle, "      return " );
     fwrite($this->write_handle, "$" . "insert_id;" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_load()
    {
     $prepare_list = "";
     $parameter_database_list = "";
     $parameter_object_list = "";
     
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, 
     "     * This is the load function of the class " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, 
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function load()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, 
     "      require \"data_connect.php\";" . "\n"  );
     fwrite($this->write_handle, 
     "      $" . "id = $" . "this->get_id();" . "\n"  );
     
     $count = $this->command_attribute_list->get_item_count();
     for( $n=0; $n < ($count-1); $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );
     $prepare_list .= "      " . $item->get_attribute() . "," . "\n";
     $parameter_database_list .= 
     "      $" . $item->get_attribute() . "," . "\n";
     $parameter_object_list .= 
     "      $" . "this->set_" . $item->get_attribute() .
     "( $" . $item->get_attribute() . " );" . "\n";
     }
     $item = $this->command_attribute_list->get_item( $count-1 );
     $prepare_list .= "      " . $item->get_attribute() . "\n";
     $parameter_database_list .= 
     "      $" . $item->get_attribute() . "\n";
     $parameter_object_list .= 
     "      $" . "this->set_" . $item->get_attribute() .
     "( $" . $item->get_attribute() . " );" . "\n";
     
     fwrite($this->write_handle, 
     "      if( $" . "stmt = $" . "mysqli->prepare(" . "\n" );
     fwrite($this->write_handle, "      \"SELECT" . "\n" );
     fwrite($this->write_handle, $prepare_list );
     fwrite($this->write_handle, "      FROM ". 
     $this->class_name . " WHERE id=?\"))" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     
     fwrite($this->write_handle, 
     "      $" . "stmt->bind_param('i', $" . "id );" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->execute();" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->bind_result" . "\n" );
     fwrite($this->write_handle, "      (" . "\n" );
     fwrite($this->write_handle, $parameter_database_list );
     fwrite($this->write_handle, "      );" . "\n" );
     
     fwrite($this->write_handle, 
     "      if( $" . "stmt->fetch() == TRUE )" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, $parameter_object_list );
     fwrite($this->write_handle, "      $" . "stmt->close();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      else" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_warning->not_found();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "mysqli->close();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      else" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->load_error();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" .
     "this->db_error->serialize();" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_warning->serialize();" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_update()
    {
     $parameter_object_list = ""; /* - of type stamp */
     $prepare_list = "";       /* - of type stamp */
     $parameter_type_list = ""; /* - of type stamp */
     $parameter_database_list = "";  /* - of type stamp */
     
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, 
     "     * This is the update function of the class " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, 
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, 
     "    public function update()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, 
     "      require \"data_connect.php\";" . "\n"  );
     
     $count = $this->command_attribute_list->get_item_count();
     for( $n=0; $n < ($count-1); $n++ )
     {
     $item = $this->command_attribute_list->get_item( $n );     
     if( $item->get_attribute_type_long() != "time_stamp" )
     {
     $parameter_object_list .= "      $" . $item->get_attribute() .
     " = $" . "this->get_". $item->get_attribute() . "();" . "\n";
     $prepare_list .= "      " . $item->get_attribute() . "=?," . "\n";
     $parameter_type_list .= $item->get_attribute_type();
     $parameter_database_list .= 
     "      $" . $item->get_attribute() . "," . "\n"; 
     }    
     }
     $item = $this->command_attribute_list->get_item( $count-1 );
     if( $item->get_attribute_type_long() != "time_stamp" )
     {
     $parameter_object_list .= "      $" . $item->get_attribute() .
     " = $" . "this->get_". $item->get_attribute() . "();" . "\n";
     $prepare_list .= "      " . $item->get_attribute() . "=?" . "\n";
     $parameter_type_list .= $item->get_attribute_type() . "i";
     $parameter_database_list .= 
     "      $" . $item->get_attribute() . "," . "\n";
     $parameter_database_list .= "      $" . "id" . "\n";
     }
     fwrite($this->write_handle, $parameter_object_list );
     fwrite($this->write_handle, 
     "      $" . "id = $" . "this->get_id();" . "\n"  );
     
     fwrite($this->write_handle, 
     "      if( $" . "stmt = $" . "mysqli->prepare(" . "\n" );
     fwrite($this->write_handle, "      \"UPDATE " . 
     $this->class_name . " SET" . "\n" );
     fwrite($this->write_handle, $prepare_list );
     fwrite($this->write_handle, "      WHERE id=?\"))" . "\n" );
     
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->bind_param" . "\n" );
     fwrite($this->write_handle, "      (" . "\n" );
     fwrite($this->write_handle, 
     "      \"" . $parameter_type_list . "\"," . "\n" );
     fwrite($this->write_handle, $parameter_database_list );
     fwrite($this->write_handle, "      );" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->execute();" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->close();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      else" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->update_error();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "mysqli->close();" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->serialize();" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function write_delete()
    {
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "    /**" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, 
     "     * This is the delete function of the class " . 
     $this->class_name . "\n" );
     fwrite($this->write_handle, 
     "     * @author Bernd Schröder" . "\n" );
     fwrite($this->write_handle, "     *" . "\n" );
     fwrite($this->write_handle, "     */" . "\n" );
     fwrite($this->write_handle, "    public function delete()" . "\n" );
     fwrite($this->write_handle, "    {" . "\n" );
     fwrite($this->write_handle, 
     "      require \"data_connect.php\";" . "\n"  );
     fwrite($this->write_handle,
     "      $" . "id = $" . "this->get_id();" . "\n"  );
     fwrite($this->write_handle, 
     "      if( $" . "stmt = $" . "mysqli->prepare(" . "\n" );
     fwrite($this->write_handle, 
     "      \"DELETE FROM " . $this->class_name . "\n" );
     fwrite($this->write_handle, "      WHERE id=?\"))" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, 
     "      $" . "stmt->bind_param(\"i\",  $" . "id);" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->execute();" . "\n" );
     fwrite($this->write_handle, "      $" . "stmt->close();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      else" . "\n" );
     fwrite($this->write_handle, "      {" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->delete_error();" . "\n" );
     fwrite($this->write_handle, "      }" . "\n" );
     fwrite($this->write_handle, "      $" . "mysqli->close();" . "\n" );
     fwrite($this->write_handle, "      $" . 
     "this->db_error->serialize();" . "\n" );
     fwrite($this->write_handle, "    }" . "\n" );
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function generate_basic_db_file()
    {
     $this->open_read_file();
     $this->read_file();
     $this->close_read_file();
     $this->generate();
     $this->open_write_basic_file();
     $this->write_basic_header();
     $this->write_attributes();
     $this->write_functions();
     $this->write_insert();
     $this->write_load();
     $this->write_update();
     $this->write_delete();
     $this->write_footer();
     $this->close_write_basic_file();
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function open_write_file()
    {
     $success = TRUE;
     $file = "../" . "class." . $this->class_name . ".php";
     
     if( file_exists ( $file ) )
     { $success = FALSE; }
     else
     { $this->write_handle = fopen($file, 'w') or die("can't open file"); }
     return $success;
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
     
    public function write_header()
    {
     fwrite($this->write_handle, "<?php" . "\n" . "\n");
     fwrite($this->write_handle, "/**" . "\n" );
     fwrite($this->write_handle, " *" .
     " This php file is automatically generated by Skolenet" . "\n" );
     fwrite($this->write_handle, " * Model - Class: " .
     $this->class_name . "\n" );
     fwrite($this->write_handle, " */" . "\n" . "\n" );
     fwrite($this->write_handle,
     "if (0 > version_compare(PHP_VERSION, '5'))" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle,
     "{ die('This file was generated for PHP 5'); }" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle,
     "require_once('generated/class.generated_" . $this->class_name . ".php');" . "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "class " . $this->class_name . "\n" );
     fwrite($this->write_handle, "     extends generated_" . $this->class_name );
     fwrite($this->write_handle, "\n" );
     fwrite($this->write_handle, "{" );
     fwrite($this->write_handle, "\n" );
    }
    
     
    public function close_write_file()
    {
     fclose($this->write_handle);
    }
    /**
     *
     * @access public
     * @author firstname and lastname of author, <author@example.org>
     */
    public function generate_db_file()
    {
     if ($this->open_write_file())
     {
     $this->write_header();
     $this->write_footer();
     $this->close_write_file();
     }
    }
}?>